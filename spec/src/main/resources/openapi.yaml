openapi: 3.0.3
info:
  title: Bankhub API
  version: 1.0.0
  description: Bankhub API

tags:
  - name: Organizations
    description: Endpoints related to organizations
  - name: Categories
    description: Endpoints related to financial categories
  - name: Banks
    description: Endpoints related to banks
  - name: Accounts
    description: Endpoints related to bank accounts
  - name: Transactions
    description: Endpoints related to account transactions
  - name: Payable/Receivable
    description: Endpoints related to payable/receivable

paths:
  /api/organizations:
    get:
      tags:
        - Organizations
      summary: Retrieve all organizations
      operationId: listOrganizations
      responses:
        '200':
          description: List of organizations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetOrganizationsResponseBody'

  /api/organizations/{id}:
    get:
      tags:
        - Organizations
      summary: Retrieve an organization by its ID
      operationId: getOrganizationById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Organization found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetOrganizationsResponseBody'
        '404':
          description: Organization not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/categories:
    get:
      tags:
        - Categories
      summary: Retrieve all categories
      operationId: listCategories
      responses:
        '200':
          description: List of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetCategoryResponseBody'

    post:
      tags:
        - Categories
      summary: Create a new category
      operationId: createCategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCategoryRequestBody'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCategoryResponseBody'

  /api/categories/{id}:
    get:
      tags:
        - Categories
      summary: Retrieve category by ID
      operationId: getCategoryById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Category found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetCategoryResponseBody'
        '404':
          description: Category not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/banks:
    get:
      tags:
        - Banks
      summary: Retrieve all banks
      operationId: listBanks
      responses:
        '200':
          description: List of banks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetBankResponseBody'

    post:
      tags:
        - Banks
      summary: Create a new bank
      operationId: createBank
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostBankRequestBody'
      responses:
        '201':
          description: Bank created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBankResponseBody'

  /api/banks/{id}:
    get:
      tags:
        - Banks
      summary: Retrieve a bank by ID
      operationId: getBankById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Bank found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetBankResponseBody'
        '404':
          description: Bank not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/accounts:
    get:
      tags:
        - Accounts
      summary: Retrieve all accounts
      operationId: listAccounts
      responses:
        '200':
          description: List of accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetAccountsResponseBody'

    post:
      tags:
        - Accounts
      summary: Create a new account
      operationId: createAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostAccountRequestBody'
      responses:
        '201':
          description: Account created successfully
          headers:
            Location:
              description: URI of the created account
              schema:
                type: string
                example: /api/accounts/123e4567-e89b-12d3-a456-426614174000
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountsResponseBody'

  /api/accounts/{id}:
    get:
      tags:
        - Accounts
      summary: Retrieve account by ID
      operationId: getAccountById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Account found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAccountResponseBody'
        '404':
          description: Account not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/transactions:
    get:
      summary: List transactions with optional filters
      operationId: getByFiltersOrderByDateTime
      tags:
        - Transactions
      description: Returns a paginated list of transactions enriched with category data. Results can be filtered by account and time range.
      parameters:
        - name: accountIds
          in: query
          description: List of account UUIDs to filter by
          required: false
          style: form
          explode: true
          schema:
            type: array
            items:
              type: string
              format: uuid

        - name: start
          in: query
          description: Start of the date/time range filter (inclusive)
          required: false
          schema:
            type: string
            format: date-time

        - name: end
          in: query
          description: End of the date/time range filter (inclusive)
          required: false
          schema:
            type: string
            format: date-time

        - name: page
          in: query
          description: Page number (0-based index)
          required: false
          schema:
            type: integer
            default: 0

        - name: size
          in: query
          description: Number of records per page
          required: false
          schema:
            type: integer
            default: 20

      responses:
        '200':
          description: Paginated list of enriched transactions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetTransactionsResponseBody'

  /api/transactions/deposit:
    post:
      summary: Create a deposit transaction
      operationId: createDeposit
      tags:
        - Transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDepositRequestBody'
      responses:
        '201':
          description: Deposit created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDepositResponseBody'

  /api/transactions/withdrawal:
    post:
      summary: Create a withdrawal transaction
      operationId: createWithdrawal
      tags:
        - Transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostWithdrawalRequestBody'
      responses:
        '201':
          description: Withdrawal created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostWithdrawalResponseBody'
  /api/payable-receivable/payables:
    post:
      summary: Create a new payable
      operationId: postPayable
      tags:
        - Payable/Receivable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPayableReceivableRequestBody'
      responses:
        '201':
          description: Payable created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostPayableReceivableResponseBody'

  /api/payable-receivable/receivables:
    post:
      summary: Create a new receivable
      operationId: postReceivable
      tags:
        - Payable/Receivable
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostPayableReceivableRequestBody'
      responses:
        '201':
          description: Receivable created successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PostPayableReceivableResponseBody'
  /api/payable-receivable:
    get:
      summary: List all payables and receivables
      operationId: getPayableReceivable
      tags:
        - Payable/Receivable
      responses:
        '200':
          description: List of payables and receivables
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/GetPayableReceivableResponseBody'
  /api/payable-receivable/{id}:
    get:
      summary: List all payables and receivables
      operationId: getPayableReceivableById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      tags:
        - Payable/Receivable
      responses:
        '200':
          description: Get payables and receivables by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPayableReceivableResponseBody'
components:
  schemas:
    GetOrganizationsResponseBody:
      type: object
      properties:
        id:
          type: string
          format: uuid
        createdAt:
          type: string
          format: date-time
        emailOwner:
          type: string
          format: email
      required:
        - id
        - createdAt
        - emailOwner

    GetCategoryResponseBody:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        type:
          $ref: '#/components/schemas/CategoryType'
      required:
        - id
        - name
        - type

    PostCategoryRequestBody:
      type: object
      properties:
        name:
          type: string
        type:
          $ref: '#/components/schemas/CategoryType'
      required:
        - name
        - type

    CategoryType:
      type: string
      enum: [CREDIT, DEBIT]

    PostBankRequestBody:
      type: object
      properties:
        name:
          type: string
      required:
        - name

    GetBankResponseBody:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
      required:
        - id
        - name

    PostAccountRequestBody:
      type: object
      properties:
        name:
          type: string
        bankId:
          type: string
          format: uuid
        initialBalance:
          type: number
          format: decimal
        currency:
          type: string
      required:
        - name
        - bankId
        - organizationId
        - initialBalance
        - currency

    GetAccountsResponseBody:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        bankId:
          type: string
          format: uuid
        balance:
          type: number
          format: decimal
        currency:
          $ref: '#/components/schemas/Currency'
      required:
        - id
        - name
        - bankId
        - balance
        - currency

    GetAccountResponseBody:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        bank:
          $ref: '#/components/schemas/GetBankResponseBody'
        balance:
          type: number
          format: decimal
        currency:
          $ref: '#/components/schemas/Currency'
      required:
        - id
        - name
        - bank
        - balance
        - currency

    PostDepositRequestBody:
      type: object
      properties:
        accountId:
          type: string
          format: uuid
        dateTime:
          type: string
          format: date-time
          nullable: true
        description:
          type: string
          nullable: true
        categoryId:
          type: string
          format: uuid
        amount:
          type: number
          format: double
      required:
        - accountId
        - amount
        - categoryId

    PostWithdrawalRequestBody:
      type: object
      properties:
        accountId:
          type: string
          format: uuid
        dateTime:
          type: string
          format: date-time
          nullable: true
        description:
          type: string
          nullable: true
        categoryId:
          type: string
          format: uuid
        amount:
          type: number
          format: double
      required:
        - accountId
        - amount
        - categoryId

    PostDepositResponseBody:
      type: object
      properties:
        id:
          type: string
          format: uuid
        dateTime:
          type: string
          format: date-time
      required:
        - id
        - dateTime

    PostWithdrawalResponseBody:
      type: object
      properties:
        id:
          type: string
          format: uuid
        dateTime:
          type: string
          format: date-time
      required:
        - id
        - dateTime

    Currency:
      type: object
      properties:
        name:
          type: string
        symbol:
          type: string
      required:
        - name
        - symbol
    GetTransactionsResponseBody:
      type: object
      properties:
        content:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: uuid
              accountId:
                type: string
                format: uuid
              dateTime:
                type: string
                format: date-time
              description:
                type: string
              category:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  name:
                    type: string
                  type:
                    type: string
                required:
                  - id
                  - name
                  - type
              amount:
                type: number
                format: double
            required:
              - id
              - dateTime
              - description
              - category
              - amount
        pageNumber:
          type: integer
        pageSize:
          type: integer
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
        first:
          type: boolean
        last:
          type: boolean
      required:
        - content
        - pageNumber
        - pageSize
        - totalElements
        - totalPages
        - first
        - last
    Frequency:
      type: string
      enum:
        - DAILY
        - WEEKLY
        - MONTHLY
        - YEARLY

    PostPayableReceivableRequestBody:
      type: object
      required:
        - accountId
        - categoryId
        - description
        - amount
        - dueDate
        - recurring
      properties:
        accountId:
          type: string
          format: uuid
        categoryId:
          type: string
          format: uuid
        description:
          type: string
        amount:
          type: number
          format: double
        dueDate:
          type: string
          format: date
        recurring:
          type: boolean
        frequency:
          $ref: '#/components/schemas/Frequency'
        installmentTotal:
          type: integer
          nullable: true

    PostPayableReceivableResponseBody:
      type: object
      required:
        - id
        - accountId
        - categoryId
        - description
        - amount
        - dueDate
        - type
        - status
      properties:
        id:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        categoryId:
          type: string
          format: uuid
        description:
          type: string
        amount:
          type: number
          format: double
        dueDate:
          type: string
          format: date
        type:
          type: string
          enum:
            - PAYABLE
            - RECEIVABLE
        status:
          type: string
          enum:
            - PENDING
            - PAID
            - OVERDUE
        frequency:
          $ref: '#/components/schemas/Frequency'
        installmentNumber:
          type: integer
        installmentTotal:
          type: integer
        transactionId:
          type: string
          format: uuid
    GetPayableReceivableResponseBody:
      type: object
      required:
        - id
        - accountId
        - categoryId
        - description
        - amount
        - dueDate
        - type
        - status
      properties:
        id:
          type: string
          format: uuid
        accountId:
          type: string
          format: uuid
        categoryId:
          type: string
          format: uuid
        description:
          type: string
        amount:
          type: number
          format: double
        dueDate:
          type: string
          format: date
        type:
          type: string
          enum:
            - PAYABLE
            - RECEIVABLE
        status:
          type: string
          enum:
            - PENDING
            - PAID
            - OVERDUE
        frequency:
          $ref: '#/components/schemas/Frequency'
        installmentNumber:
          type: integer
        installmentTotal:
          type: integer
        recurrenceDay:
          type: integer
        transactionId:
          type: string
          format: uuid
    Error:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
      required:
        - code
        - message

  securitySchemes:
    ClientCredentials:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: ''
          scopes: {}

security:
  - ClientCredentials: []
